---
name: pdk

on:
  push:
  pull_request:
    types: ['opened', 'synchronize', 'reopened', 'ready_for_review']

concurrency:
  group: '${{ github.workflow }}-${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  initialize:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    outputs:
      DIRS: ${{ steps.get-dirs.outputs.DIRS }}
      name: Initialization
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get directories list
        id: get-dirs
        run: |
          if [ "${{ github.ref }}" != 'refs/heads/staging' ] && \
             [ "${{ github.ref }}" != 'refs/heads/production' ] && \
             [ "${{ github.event_name }}" != 'pull_request' ]; then
            source_branch="staging"
            git fetch origin $source_branch
            dirs=$(git diff --name-only "origin/$source_branch"..HEAD | grep '^dist/' | cut -d'/' -f1-2 | sort | uniq | jq -R . | jq -s . | jq -cr '@json')
          else
            dirs=$(find dist -mindepth 1 -maxdepth 1 -type d | sort | jq -R . | jq -s . | jq -cr '@json')
          fi
          echo "dirs: $dirs"
          echo "DIRS=$dirs" >> "$GITHUB_OUTPUT"

  pdk_test:
    needs: initialize

    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJSON(needs.initialize.outputs.DIRS) }}
        puppet_version:
          - '7'
    name: ${{ matrix.dir }} - ${{ matrix.puppet_version }}
    if: |
      needs.initialize.outputs.DIRS != '' &&
      needs.initialize.outputs.DIRS != '[]' &&
      needs.initialize.outputs.DIRS != 'null' &&
      github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install the PDK
        run: |
          source /etc/os-release
          wget https://apt.puppet.com/puppet-tools-release-${UBUNTU_CODENAME}.deb
          sudo dpkg -i puppet-tools-release-${UBUNTU_CODENAME}.deb
          sudo apt-get update
          sudo apt-get install pdk
      - name: Syntax validation
        run: |
          echo "Processing directory: $${{ matrix.dir }}"
          cd "${{ matrix.dir }}" || exit
          pdk validate --puppet-version "${{ matrix.puppet_version }}"
          cd -
        continue-on-error: true
      - name: Unit test
        run: |
          echo "Processing directory: $${{ matrix.dir }}"
          cd "${{ matrix.dir }}" || exit
          pdk test unit --verbose "${{ matrix.puppet_version }}"
          cd -
        continue-on-error: false
